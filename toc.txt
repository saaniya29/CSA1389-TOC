1
#include<stdio.h>
#include<string.h>
int main() 
{
   char str[100];
   printf("enter the string to be checked: ");
   scanf("%s",&str);
   int length=strlen(str);
   if(str[0] == 'a' && str[length-1] == 'a')
   {
      printf("Accepted");
   }
    else
	{
      printf("Rejected");
    return 0;
    }
}


2
#include<stdio.h>
#include<string.h>
int main() 
{
   char str[100];
   printf("enter the string to be checked: ");
   scanf("%s",str);
   int lenght = strlen(str);
   if(str[0] == '0' && str[lenght-1] == '1')
   {
      printf("Accepted");
   }
    else
	{
      printf("Rejected");
    return 0;
    }
}

3
#include<stdio.h>
#include<string.h>
int main()
{
	char str[100];
	printf("enter the string to be checked: ");
	scanf("%s",str);
	int length=strlen(str);
	if (str[0]=='0'&&str[length-1]=='1')
	{
		printf("accepted");
	}
	else
	{
		printf("rejected");
	}
	return 0;
}

4
#include<stdio.h>
#include<string.h>
int main() 
{
   char str[100];
   printf("enter the string to be checked: ");
   scanf("%s",str);
   int length= strlen(str);
   if (str[0]==str[length-1]&&str[1]==str[length-2])
   {
      printf("Accepted");
   }
    else
	{
      printf("Rejected");
    return 0;
    }
}

5
#include<stdio.h>
#include<string.h>
int main()
{
char s[100];
int i,flag,flag1,a,b,l,count1,count2;
printf("enter a string to check:");
scanf("%s",s);
l=strlen(s);
flag=1;
for(i=0;i<l;i++)
{
if(s[i]!='0' && s[i]!='1')
{
 flag=0;
}
}
if(flag!=1)
printf("string is Not Valid\n");
if(flag==1)
{
i=0;count1=0;
while(s[i]=='0')
{
count1++;
i++;
}
while(s[i]=='1')
{
i++;
}
flag1=1;
count2=0;
while(i<l)
{
if(s[i]=='0'
{
count2++;
}
else
{
flag1=0;
}
i++;
}
if(flag1==1)
{
if(count1==count2)
 {
 printf("The string satisfies the condition 0n1m0n\n");
 printf("String Accepted\n");
 }
 else
 {
 printf("The string does not satisfy the condition 0n1m0n\n");
 printf("String Not Accepted\n");
 }
}
else
 {
 printf("The string does not satisfy the condition 0n1m0n\n");
 printf("String Not Accepted\n");
}
}
}

6
#include<stdio.h>
#include<string.h>
int main()
{
char s[100];
int i,flag,flag1,flag2,l;
printf("enter a string to check:");
scanf("%s",s);
l=strlen(s);
flag=1;
for(i=0;i<l;i++)
{
if(s[i]!='0' && s[i]!='1')
{
 flag=0;
}
}
if(flag!=1)
printf("string is Not Valid\n");
if(flag==1)
{
if(l%2!=0)
 {
 printf("The string does not satisfy the condition 0n1n\n");
 printf("String Not Accepted\n");
 }
else
{
flag1=1;
for(i=0;i<(l/2);i++)
{
if(s[i]!='0')
{
flag1=0;
}
}
flag2=1;
for(i=l/2;i<l;i++)
{
if(s[i]!='1')
{
flag2=0;
}
}
if(flag1==1 && flag2==1)
 {
 printf("The string satisfies the condition 0n1n\n");
 printf("String Accepted\n");
 }
else
 {
 printf("The string does not satisfy the condition 0n1n\n");
 printf("String Not Accepted\n");
 }
}
}
}

7
#include<stdio.h>
#include<string.h>
int main()
{
char s[100];
int i,flag,flag1,l;
printf("enter a string to check:");
scanf("%s",s);
l=strlen(s);
flag=1;
for(i=0;i<l;i++)
{
if(s[i]!='0' && s[i]!='1')
{
 flag=0;
}
}
if(flag==1)
printf("string is Valid\n");
else
printf("string is Not Valid\n");
if(flag==1)
{
flag1=0;
for(i=0;i<l-2;i++)
{
if(s[i]=='1')
{
if(s[i+1]=='0' && s[i+2]=='1')
{
flag1=1;0
printf("Substring 101 exists. String accepted\n");
break;
}
}
}
if(flag1==0)
printf("Substring 101 does not exist. String not accepted\n");
}
}

8
#include <stdio.h>
#include <stdbool.h>
bool nfa_transition(int current_state, char input) {
    if (current_state == 0 && input == 'b') {
        return true;
    } else if (current_state == 1 && input == 'a') {
        return true;
    }
    return false;
}
bool simulate_nfa(const char *input_string) {
    int current_state = 0;
    int i;
    for (i = 0; input_string[i] != '\0'; ++i) {
        if (nfa_transition(current_state, input_string[i])) {
            current_state++;
        }
    }
    return current_state == 2;
}
int main() {
    char input[100];
    printf("Enter a string: ");
    scanf("%s", input);
    if (simulate_nfa(input)) {
        printf("String is accepted by the NFA.\n");
    } else {
        printf("String is not accepted by the NFA.\n");
    }
    return 0;
}

9

#include <stdio.h>
#include <stdbool.h>
bool nfa_transition(int current_state, char input) {
    if (current_state == 0 && input == 'o') {
        return true;
    } else if (current_state == 1 && input == '1') {
        return true;
    }
    return false;
}
bool simulate_nfa(const char *input_string) {
    int current_state = 0;
    int i;
    for (i = 0; input_string[i] != '\0'; ++i) {
        if (nfa_transition(current_state, input_string[i])) {
            current_state++;
        }
    }
    return current_state == 2; 
}
int main() {
    char input[100];
    printf("Enter a string: ");
    scanf("%s", input);
    if (simulate_nfa(input)) {
        printf("String is accepted by the NFA.\n");
    } else {
        printf("String is not accepted by the NFA.\n");
    }
    return 0;
}


10
#include <stdio.h>
#include <stdbool.h>
#define MAX_STATES 100
#define MAX_TRANSITIONS 100
typedef struct {
    int state;
    int transition;
} Transition;
typedef struct {
    int numStates;
    int numTransitions;
    Transition transitions[MAX_TRANSITIONS];
} NFA;
void epsilonClosure(NFA nfa, int state, bool visited[], bool closure[]) {
    visited[state] = true;
    closure[state] = true;

    for (int i = 0; i < nfa.numTransitions; i++) {
        Transition transition = nfa.transitions[i];
        if (transition.state == state && transition.transition == -1) {
            int nextState = nfa.transitions[i].transition;
            if (!visited[nextState]) {
                epsilonClosure(nfa, nextState, visited, closure);
            }
        }
    }
}
int main() {
    NFA nfa;
    printf("Enter the number of states: ");
    scanf("%d", &nfa.numStates);
    printf("Enter the number of transitions: ");
    scanf("%d", &nfa.numTransitions);
    printf("Enter transition information:\n");
    for (int i = 0; i < nfa.numTransitions; i++) {
        printf("Transition %d: (state, transition) = ", i + 1);
        scanf("%d%d", &nfa.transitions[i].state, &nfa.transitions[i].transition);
    }
    printf("\ne-Closure for each state:\n");
    for (int i = 0; i < nfa.numStates; i++) {
        bool visited[MAX_STATES] = {false};
        bool closure[MAX_STATES] = {false};
        epsilonClosure(nfa, i, visited, closure);
        printf("e-Closure(q%d): { ", i);
        for (int j = 0; j < nfa.numStates; j++) {
            if (closure[j]) {
                printf("q%d ", j);
            }
        }
        printf("}\n");
    }
    return 0;
}

11
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#define MAX_STATES 100
typedef struct Node {
    int state;
    struct Node* next;
} Node;
typedef struct {
    Node* head;
} List;
typedef struct {
    int numStates;
    List transitions[MAX_STATES][2]; 
} NFA;
void addTransition(NFA* nfa, int fromState, int toState, int type) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->state = toState;
    newNode->next = nfa->transitions[fromState][type].head;
    nfa->transitions[fromState][type].head = newNode;
}
void epsilonClosure(NFA* nfa, int state, bool visited[], bool closure[]) {
    visited[state] = true;
    closure[state] = true;
    Node* current = nfa->transitions[state][0].head;
    while (current != NULL) {
        if (!visited[current->state]) {
            epsilonClosure(nfa, current->state, visited, closure);
        }
        current = current->next;
    }
}
int main() {
    NFA nfa;
    printf("Enter the number of states: ");
    scanf("%d", &nfa.numStates);
    int numTransitions;
    printf("Enter the number of transitions: ");
    scanf("%d", &numTransitions);
    printf("Enter transition information:\n");
    for (int i = 0; i < numTransitions; i++) {
        int fromState, toState, type;
        printf("Transition %d: (from state, to state, type (0 for epsilon, 1 for normal)) = ", i + 1);
        scanf("%d %d %d", &fromState, &toState, &type);
        addTransition(&nfa, fromState, toState, type);
    }
    printf("\ne-Closure for each state:\n");
    for (int i = 0; i < nfa.numStates; i++) {
        bool visited[MAX_STATES] = {false};
        bool closure[MAX_STATES] = {false};
        epsilonClosure(&nfa, i, visited, closure);
        printf("e-Closure(q%d): { ", i);
        for (int j = 0; j < nfa.numStates; j++) {
            if (closure[j]) {
                printf("q%d ", j);
            }
        }
        printf("}\n");
    }
    return 0;
}